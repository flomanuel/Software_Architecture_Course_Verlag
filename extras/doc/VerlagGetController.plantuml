' Copyright (C) 2019 - present Juergen Zimmermann, Hochschule Karlsruhe
'
' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <https://www.gnu.org/licenses/>.
@startuml VerlagHandler

skinparam classAttributeIconSize 0

package jakarta.servlet.http {
    class HttpServletRequest
}

package org.springframework {
    package web.bind.annotation {
        interface "@RestController" as RestController
        interface "@RequestMapping" as RequestMapping
        interface "@PathVariable" as PathVariable
        interface "@RequestParam" as RequestParam
        interface "@ExceptionHandler" as ExceptionHandler
        interface "@ResponseStatus" as ResponseStatus

        RequestMapping .left[hidden].> RestController
    }

    package http {
        class ResponseEntity<T>
    }
    package hateoas {
        class CollectionModel<E>
    }
    package security.core {
        class Authentication
    }
    package util {
        class MultiValueMap<K,V>
    }

    CollectionModel .up[hidden].> Authentication
    ResponseEntity .up[hidden].> CollectionModel
}

package java.util {
    class UUID

    UUID .up[hidden].> HttpServletRequest
}

package com.acme.verlag {
    package entity {
        class Verlag << entity >>
    }

    package service {
        class VerlagReadService << control >> << @Service >>
        class NotFoundException
        class AccessForbiddenException

        VerlagReadService .right[hidden].> NotFoundException
        NotFoundException .right[hidden].> AccessForbiddenException
    }

    package rest #DDDDDD {
        class VerlagModel <<entity>>

        class VerlagGetController << boundary >> << @RestController >> << @RequestMapping >> {
            + @GetMapping getById(@PathVariable id: UUID, @RequestHeader("If-None-Match") version: String, request: HttpServletRequest, authentication: Authentication): ResponseEntity<VerlagModel>
            + @GetMapping get(@RequestParam queryParams: MultiValueMap<String, String>, request: HttpServletRequest)
        }

        class CommonExceptionHandler << @ControllerAdvice >> {
            + @ExceptionHandler @ResponseStatus onNotFound(ex: NotFoundException)
            + @ExceptionHandler @ResponseStatus onAccessForbidden(ex: AccessForbiddenException)
        }

        VerlagGetController o-right-> "1" VerlagReadService : service
        VerlagGetController ..> VerlagModel
        VerlagGetController ..> Verlag

        VerlagGetController .up.> CollectionModel
        VerlagGetController .right.> HttpServletRequest
        VerlagGetController .up.> MultiValueMap
        VerlagGetController .up.> Authentication
        VerlagGetController .up.> ResponseEntity

        VerlagGetController .up.> RestController
        VerlagGetController .up.> RequestMapping
        VerlagGetController .up.> PathVariable
        VerlagGetController .up.> RequestParam

        CommonExceptionHandler .up.> ExceptionHandler
        CommonExceptionHandler .up.> ResponseStatus
        CommonExceptionHandler ..> NotFoundException
        CommonExceptionHandler ..> AccessForbiddenException
        CommonExceptionHandler .up[hidden].> VerlagModel
        CommonExceptionHandler .[hidden].> Verlag

        VerlagGetController .right.> UUID

        VerlagModel ..> Verlag
        VerlagModel .[hidden].> VerlagReadService
    }
}

hide empty members

footer (c) Juergen Zimmermann

@enduml
