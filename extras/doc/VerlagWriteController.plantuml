' Copyright (c) 2023 - present Florian Sauer
'
' This program is free software: you can redistribute it and/or modify
' it under the terms of the GNU General Public License as published by
' the Free Software Foundation, either version 3 of the License, or
' (at your option) any later version.
'
' This program is distributed in the hope that it will be useful,
' but WITHOUT ANY WARRANTY; without even the implied warranty of
' MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
' GNU General Public License for more details.
'
' You should have received a copy of the GNU General Public License
' along with this program.  If not, see <https://www.gnu.org/licenses/>.

' https://c4model.com
' https://www.infoq.com/articles/C4-architecture-model
' https://github.com/plantuml-stdlib/C4-PlantUML
@startuml VerlagHandler

skinparam classAttributeIconSize 0

package jakarta.servlet.http {
    class HttpServletRequest
}

package org.springframework {
    package stereotype {
        interface "@Controller" as Controller
    }

    package web.bind.annotation {
        interface "@RequestMapping" as RequestMapping
        interface "@PathVariable" as PathVariable
        interface "@RequestBody" as RequestBody
        interface "@ExceptionHandler" as ExceptionHandler

        RequestBody .left[hidden].> Controller
        ExceptionHandler .left[hidden].> Controller
    }

    package http {
        class ResponseEntity<T>
        class ProblemDetail

        ResponseEntity .[hidden].> ProblemDetail
        ResponseEntity .left[hidden].> Controller
    }
}

package java.util {
    class UUID
    class Optional<T>

    Optional .[hidden].> UUID
    HttpServletRequest .up[hidden].> UUID
}

package com.acme.verlag {
    package service {
        class VerlagWriteService << control >> << @Service >>

        class ConstraintViolationsException
        class VersionOutdatedException
    }

    package rest #DDDDDD {

        class VerlagDTO <<entity>>
        class verlagUpdateDTO <<entity>>

        VerlagDTO .[hidden].> UUID
        VerlagDTO .[hidden].> VerlagWriteService

        class VersionInvalidException

        class VerlagWriteController << boundary >> << @Controller >> << @RequestMapping >> {
            + @PostMapping post(@RequestBody verlagDTO: VerlagDTO, request: HttpServletRequest): ResponseEntity<Void>
            + @PutMapping put(@PathVariable id: UUID, @RequestBody verlagUpdateDTO: VerlagUpdateDTO, @RequestHeader("If-Match") version: Optional<String>, request: HttpServletRequest): ResponseEntity<Void>
            + @ExceptionHandler onConstraintViolations(ex: ConstraintViolationsException, request: HttpServletRequest): ProblemDetail
            + @ExceptionHandler onVersionOutdated(ex: VersionOutdatedException, request: HttpServletRequest): ProblemDetail
            + @ExceptionHandler onVersionInvalid(ex: VersionInvalidException, request: HttpServletRequest): ProblemDetail
        }

        VerlagWriteController o-right-> "1" VerlagWriteService : service
        VerlagWriteController ..> verlagUpdateDTO
        VerlagWriteController ..> VerlagDTO
        VerlagWriteController .up.> UUID
        VerlagWriteController .up.> Optional
        VerlagWriteController ..> ConstraintViolationsException
        VerlagWriteController ..> VersionInvalidException
        VerlagWriteController ..> VersionOutdatedException

        VerlagWriteController .up.> HttpServletRequest
        VerlagWriteController .up.> ResponseEntity
        VerlagWriteController .up.> ProblemDetail

        VerlagWriteController .up.> Controller
        VerlagWriteController .up.> RequestMapping
        VerlagWriteController .up.> PathVariable
        VerlagWriteController .up.> RequestBody
        VerlagWriteController .up.> ExceptionHandler

    }
}

hide empty members

footer (c) Florian Sauer

@enduml
